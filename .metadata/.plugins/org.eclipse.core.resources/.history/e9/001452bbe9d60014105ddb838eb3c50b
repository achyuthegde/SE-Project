package TransferObject;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;
import java.net.UnknownHostException;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

public class UDPSocketClient
{
	DatagramSocket socket;
	byte[] incomingData;

	public UDPSocketClient(int port, int size)
	{
		try
		{
			socket = new DatagramSocket(port);
			incomingData = new byte[1024000];
		}
		catch (SocketException e)
		{
			e.printStackTrace();
		}
	}

	public void createAndListenSocket()
	{
		try
		{
			JFrame frame = new JFrame();
			DatagramPacket incomingPacket = new DatagramPacket(incomingData,
					incomingData.length);
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			Dimension dm = Toolkit.getDefaultToolkit().getScreenSize();
			frame.setSize(dm);
			//frame.setUndecorated(true);
//			JLabel image = new JLabel(icon);--->Use if not working
			JLabel image = new JLabel();
			ImageIcon icon = null;
			while (true)
			{
				socket.receive(incomingPacket);
				System.out.println("Received");
				byte[] data = incomingPacket.getData();
				ByteArrayInputStream in = new ByteArrayInputStream(data);
				ObjectInputStream is = new ObjectInputStream(in);
				ImageStructure imageObject = (ImageStructure) is.readObject();
				// System.out.println("Image object received = "
				// + image.getId());
				icon = imageObject.getImage();
				image.setIcon(icon);//Remove if doesnt work and use icon as parameter to JLabel
				frame.repaint();
				frame.setIconImage(icon.getImage());
				frame.add(image);
				frame.setVisible(true);
//				Thread.sleep(140);
			}

		}
		catch (UnknownHostException e)
		{
			e.printStackTrace();
		}
		catch (SocketException e)
		{
			e.printStackTrace();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		catch (ClassNotFoundException e)
		{
			e.printStackTrace();
		}
//		catch (InterruptedException e)
//		{
//			e.printStackTrace();
//		}
	}

	public static void main(String[] args)
	{
		UDPSocketClient client = new UDPSocketClient(9876, 1024000);// 1024*100
																	// -->
																	// 1000KB
		client.createAndListenSocket();
	}
}
